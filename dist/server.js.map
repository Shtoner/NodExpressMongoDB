{"version":3,"sources":["../src/server.js"],"names":["bodyParser","require","express","app","MongoClient","config","path","connectionString","process","env","DB_CONNECT","console","log","connect","then","client","db","quotesCollection","collection","set","use","urlencoded","extended","json","static","__dirname","listen","get","req","res","find","toArray","results","render","quotes","catch","error","post","insertOne","body","result","redirect","put","findOneAndUpdate","name","$set","quote","upsert","delete","deleteOne"],"mappings":"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","file":"server.js","sourcesContent":["\r\nconst bodyParser= require('body-parser')\r\nconst express = require('express');\r\nconst app = express();\r\nconst MongoClient = require('mongodb').MongoClient\r\n\r\n\r\nrequire('dotenv').config({ path: 'secret/vars.env' })\r\n// dotenv.config({ path: './secret/vars/.env' });\r\n// const connectionString = process.env.DB_CONNECT\r\nconst connectionString = process.env.DB_CONNECT\r\nconsole.log(connectionString)\r\nMongoClient.connect(connectionString)\r\n  .then(client =>{\r\n  const db = client.db('CRUD')\r\n  const quotesCollection = db.collection('quotes')\r\n\r\napp.set('view engine', 'ejs')\r\n\r\napp.use(bodyParser.urlencoded({ extended: true }))\r\napp.use(bodyParser.json())\r\napp.use(express.static(__dirname + '/public'));\r\n\r\napp.listen(3000, function() {\r\n  console.log('listening on 3000')\r\n})\r\n\r\n// app.get('/', function(req, res) {\r\n//   res.sendFile(__dirname + '/index.html')\r\n// })\r\napp.get('/', (req, res) => {\r\n  // res.sendFile(__dirname + '/index.html')\r\n\r\n  db.collection('quotes').find().toArray()\r\n    .then(results => {\r\n      // console.log(results)\r\n    res.render('index.ejs', {quotes: results})\r\n\r\n    })\r\n    .catch(error => console.error(error))\r\n  \r\n})\r\n\r\napp.post('/quotes', (req, res) => {\r\n  quotesCollection.insertOne(req.body)\r\n  .then(result => {\r\n    res.redirect('/')\r\n  })\r\n  .catch(error => console.error(error))\r\n  console.log(req.body)\r\n})\r\n\r\napp.put('/quotes', (req, res) => {\r\n  quotesCollection.findOneAndUpdate(\r\n    { name: 'yoda' },\r\n    {\r\n      $set: {\r\n        name: req.body.name,\r\n        quote: req.body.quote\r\n      }\r\n    },\r\n    {\r\n      upsert: true\r\n    }\r\n  )\r\n  .then(result => {\r\n    res.json('success')\r\n   })\r\n  .catch(error => console.error(error))\r\n})\r\n\r\napp.delete('/quotes', (req, res) =>{\r\n  quotesCollection.deleteOne(\r\n    {  },//fill in name: req.body.name to query specific\r\n  )\r\n  .then(result => {\r\n    res.json(`Deleted Darth Vader's quote`)\r\n  })\r\n  .catch(error => console.error(error))\r\n})\r\napp.delete('/quotes', (req, res) =>{\r\n  quotesCollection.deleteOne(\r\n    { name: req.body.name },\r\n  )\r\n  .then(result => {\r\n    res.json(`Deleted Darth Vader's quote`)\r\n  })\r\n  .catch(error => console.error(error))\r\n})\r\n\r\n})\r\n\r\n\r\n"]}